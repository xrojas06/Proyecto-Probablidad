require(dplyr)
library(dplyr)
library(plotly)
#leer la base de datos csv y guardarla en la variable datos
datos <- read.csv(file = 'database.csv', header = TRUE, sep = ";")
View(datos)
#
db <- aggregate(datos[,3:10], list(datos$'Regional indicator'),mean)
db <- aggregate(datos[,3:10], list(datos$'Regional indicator'),mean)
db <- aggregate(datos[,3:10], list(datos$'Regional indicator'),mean)
db <- aggregate(datos[,3:10], list(datos$'Regional indicator'),mean)
library(readr)
database <- read_delim("database.csv", ";",
escape_double = FALSE, trim_ws = TRUE)
View(database)
db <- aggregate(datos[,3:10], list(database$'Regional indicator'),mean)
db <- aggregate(datos[,3:10], list(database$'Regional indicator'),mean)
db <- aggregate(datos[,3:10], list(database$'Regional indicator'),mean)
db <- aggregate(datos[,3:10], list(database$'Regional indicator'),mean)
db <- aggregate(datos[,3:10], list(datos$'Regional indicator'),mean)
require(dplyr)
library(dplyr)
library(plotly)
db <- aggregate(datos[,3:10], list(datos$'Regional indicator'),mean)
require(dplyr)
library(dplyr)
library(plotly)
library(ggplot2)
summary(database)
db <- aggregate(database[,3:9], list(database$`Regional indicator`),mean)
View(db)
library(readr)
rm(database)
database <- read_delim("database.csv", ";",
escape_double = FALSE, trim_ws = TRUE)
View(database)
View(db)
rm(datos)
require(dplyr)
library(dplyr)
library(plotly)
library(readr)
#leer la base de datos csv y guardarla en la variable datos
database <- read_delim("database.csv", ";",
escape_double = FALSE, trim_ws = TRUE)
View(database)
require(dplyr)
library(dplyr)
library(plotly)
library(ggplot2)
View(database)
require(dplyr)
library(dplyr)
library(plotly)
library(ggplot2)
db <- aggregate(database[,3:9], list(database$`Regional indicator`),mean)
regions = c(db$Group.1)
healthy = c(db$`Healthy life expectancy`)
ladder = c(db$`Ladder score`)
GDP = c(db$`Logged GDP per capita`)
social = c(db$`Social support`)
free = c(db$`Freedom to make life choices`)
gen = c(db$`Generosity`)
corruption = c(db$`Perceptions of corruption`)
colores = list(color = c('rgba(3,169,244,0.5)', 'rgba(244,67,54,0.5)',
'rgba(233,30,99,0.5)', 'rgba(156, 39, 176,0.5)',
'rgba(63, 81, 181, 0.5)', 'rgba(0, 188, 212, 0.5)',
'rgba(0, 150, 136, 0.5)', 'rgba(76, 175, 80, 0.5)',
'rgba(205, 220, 57, 0.5)', 'rgba(255, 152, 0, 0.5)'))
datah = data.frame(regions,healthy)
grafico <- plot_ly(datah, x =regions, y =healthy, marker = colores)
grafico <- grafico %>% layout(title = "Healthy",
xaxis = list(title = ""),
yaxis = list(title = ""))
grafico
datag = data.frame(regions,GDP)
graficog = plot_ly(datag, x = regions, y = GDP, marker = colores)
graficog <- graficog %>% layout(title = "Logged GDP",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficog
datas = data.frame(regions,social)
graficos = plot_ly(datas, x = regions, y = social, marker = colores)
graficos <- graficos %>% layout(title = "Social Support",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficos
dataf = data.frame(regions,free)
graficof = plot_ly(dataf, x = regions, y = free, marker = colores)
graficof <- graficof %>% layout(title = "Freedom Choices",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficof
datage = data.frame(regions,gen)
graficoge = plot_ly(datage, x = regions, y=gen, marker = colores)
graficoge <- graficoge %>% layout(title = "Generosity",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficoge
dataco = data.frame(regions,corruption)
graficoco = plot_ly(dataco,x = regions, y=corruption, marker = colores)
graficoco <- graficoco %>% layout(title = "Corruption",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficoco
datal = data.frame(regions,ladder)
graficol = plot_ly(datal, x = regions, y = ladder, marker = colores)
graficol <- graficol %>% layout(title = "Ladder Score",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficol
datal = data.frame(regions,ladder)
graficol = plot_ly(datal, x = regions, y = ladder, marker = colores)
graficol <- graficol %>% layout(title = "Ladder Score",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficol
require(dplyr)
library(dplyr)
library(plotly)
library(ggplot2)
#agrupar los paises por region y hacer un promedio de cada variable
db <- aggregate(database[,3:9], list(database$`Regional indicator`),mean)
View(db)
#guardar cada variable en un vector
regions = c(db$Group.1)
healthy = c(db$`Healthy life expectancy`)
ladder = c(db$`Ladder score`)
GDP = c(db$`Logged GDP per capita`)
social = c(db$`Social support`)
free = c(db$`Freedom to make life choices`)
gen = c(db$`Generosity`)
corruption = c(db$`Perceptions of corruption`)
#colores que se usaran para las graficas
colores = list(color = c('rgba(3,169,244,0.5)', 'rgba(244,67,54,0.5)',
'rgba(233,30,99,0.5)', 'rgba(156, 39, 176,0.5)',
'rgba(63, 81, 181, 0.5)', 'rgba(0, 188, 212, 0.5)',
'rgba(0, 150, 136, 0.5)', 'rgba(76, 175, 80, 0.5)',
'rgba(205, 220, 57, 0.5)', 'rgba(255, 152, 0, 0.5)'))
#grafica de barras por region de la variable healthy life expectancy
datah = data.frame(regions,healthy)
grafico <- plot_ly(datah, x =regions, y =healthy, marker = colores)
grafico <- grafico %>% layout(title = "Healthy",
xaxis = list(title = ""),
yaxis = list(title = ""))
grafico
#grafica de barras por region de la variable logged GDP per capita
datag = data.frame(regions,GDP)
graficog = plot_ly(datag, x = regions, y = GDP, marker = colores)
graficog <- graficog %>% layout(title = "Logged GDP",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficog
#grafica de barras por region de la variable social support
datas = data.frame(regions,social)
graficos = plot_ly(datas, x = regions, y = social, marker = colores)
graficos <- graficos %>% layout(title = "Social Support",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficos
#grafica de barras por region de la variable freedom to make life choices
dataf = data.frame(regions,free)
graficof = plot_ly(dataf, x = regions, y = free, marker = colores)
graficof <- graficof %>% layout(title = "Freedom Choices",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficof
#grafica de barras por region de la variable generosity
datage = data.frame(regions,gen)
graficoge = plot_ly(datage, x = regions, y=gen, marker = colores)
graficoge <- graficoge %>% layout(title = "Generosity",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficoge
#grafica de barras por region de la variable Perception of Corruption
dataco = data.frame(regions,corruption)
graficoco = plot_ly(dataco,x = regions, y=corruption, marker = colores)
graficoco <- graficoco %>% layout(title = "Corruption",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficoco
#grafica de barras por region de la variable ladder score
datal = data.frame(regions,ladder)
graficol = plot_ly(datal, x = regions, y = ladder, marker = colores)
graficol <- graficol %>% layout(title = "Ladder Score",
xaxis = list(title = ""),
yaxis = list(title = ""))
graficol
require(dplyr)
library(dplyr)
library(plotly)
top15 <- database[1:3] %>%
slice(1:15)
ld = c(top15$`Ladder score`)
country =  factor(top15$`Country name`, levels = unique(top15$`Country name`)[order(top15$`Ladder score`, decreasing = FALSE)])
country
ld = c(top15$`Ladder score`)
country =  factor(top15$`Country name`, levels = unique(top15$`Country name`)[order(top15$`Ladder score`, decreasing = FALSE)])
barh <- plot_ly(top15,x = ld,y = country,type = 'bar', orientation = 'h',  color = I("dark green"))
barh
x = (top15 %>%  group_by(`Regional indicator`) %>% summarise(mean = mean(ld), n = n()))
View(x)
barh <- plot_ly(last15,x = ld,y = country,type = 'bar', orientation = 'h',  color = I("dark red"))
barh
last15 <- database[1:3] %>%
slice_tail(n = 15)
ld = c(last15$`Ladder score`)
country =  factor(last15$`Country name`, levels = unique(last15$`Country name`)[order(last15$`Ladder score`, decreasing = FALSE)])
ld = c(last15$`Ladder score`)
country =  factor(last15$`Country name`, levels = unique(last15$`Country name`)[order(last15$`Ladder score`, decreasing = FALSE)])
barh <- plot_ly(last15,x = ld,y = country,type = 'bar', orientation = 'h',  color = I("dark red"))
barh
y = (last15 %>%  group_by(`Regional indicator`) %>% summarise(mean = mean(ld), n = n()))
View(y)
y = (last15 %>%  group_by(`Regional indicator`) %>% summarise(mean = mean(ld), n = n()))
View(y)
y = (last15 %>%  group_by(`Regional indicator`) %>% summarise(mean = mean(ld), n = n()))
View(y)
require(dplyr)
library(dplyr)
library(plotly)
#sacar el top 15 de paises mas felices, es decir mayor ladder score
top15 <- database[1:3] %>%
slice(1:15)
#View(top15)
#vector de la variable ladder score en el top 15 y un factor con los paises ordenados de mayor a menor
ld = c(top15$`Ladder score`)
country =  factor(top15$`Country name`, levels = unique(top15$`Country name`)[order(top15$`Ladder score`, decreasing = FALSE)])
#barras horizontales del top 15
barh <- plot_ly(top15,x = ld,y = country,type = 'bar', orientation = 'h',  color = I("dark green"))
barh
#organizado por regiones el top 15 con la cantidad de cuantos paises por region hay en este top15
x = (top15 %>%  group_by(`Regional indicator`) %>% summarise(mean = mean(ld), n = n()))
View(x)
#sacar el top 15 de paises menos felices, es decir menos ladder score
last15 <- database[1:3] %>%
slice_tail(n = 15)
#View(last15)
#vector de la variable ladder score en el last15 y factor con los paises de mayor a menor
ld = c(last15$`Ladder score`)
country =  factor(last15$`Country name`, levels = unique(last15$`Country name`)[order(last15$`Ladder score`, decreasing = FALSE)])
#barras horizontales del last 15
barh <- plot_ly(last15,x = ld,y = country,type = 'bar', orientation = 'h',  color = I("dark red"))
barh
#organizado por regiones last 15, con la cantidad de cuantos paises por region hay en este last15
y = (last15 %>%  group_by(`Regional indicator`) %>% summarise(mean = mean(ld), n = n()))
View(y)
require(dplyr)
library(dplyr)
library(plotly)
library(corrplot)
#-----------------------------------------------------------
#vectores los datos con las variables de la base de datos original
Rregions = c(database$`Regional indicator`)
Rcountry = c(database$`Country name`)
Rhealthy = c(database$`Healthy life expectancy`)
Rladder = c(database$`Ladder score`)
RGDP = c(database$`Logged GDP per capita`)
Rsocial = c(database$`Social support`)
Rfree = c(database$`Freedom to make life choices`)
Rgen = c(database$`Generosity`)
Rcorruption = c(database$`Perceptions of corruption`)
#-----------------------------------------------------------
#variable dependiente ladder score con la que se haran los siguientes modelos lineales
y = Rladder
#modelo lineal LOGGED GDP per capita y diagrama
x = RGDP
mod = lm(y~x)
summary(mod)
fv <- mod %>% fitted.values()
f <- plot_ly(database, x = ~RGDP) %>%
add_trace(y = ~Rladder,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
#modelo lineal social support y diagrama
x1 = Rsocial
mod1 = lm(y~x1)
summary(mod1)
fv1 <- mod1 %>% fitted.values()
f2 <- plot_ly(database, x = ~x1) %>%
add_trace(y = ~y,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv1, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
#modelo lineal de healthy life expectancy y diagrama
x2 = Rhealthy
mod2 = lm(y~x2)
summary(mod2)
fv2 <- mod2 %>% fitted.values()
f3 <- plot_ly(database, x = ~x2) %>%
add_trace(y = ~y,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv2, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
#modelo lineal de freedom to make life choices y diagrama
x3 = Rfree
mod3 = lm(y~x3)
summary(mod3)
fv3 <- mod3 %>% fitted.values()
f4 <- plot_ly(database, x = ~x3) %>%
add_trace(y = ~y,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv3, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
#modelo lineal de generosity y diagrama
x4 = Rgen
mod4 = lm(y~x4)
summary(mod4)
fv4 <- mod4 %>% fitted.values()
f5 <- plot_ly(database, x = ~x4) %>%
add_trace(y = ~y,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv4, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
#modelo lineal de perception of corruption y diagrama
x5 = Rcorruption
mod5 = lm(y~x5)
summary(mod5)
fv5 <- mod5 %>% fitted.values()
f6 <- plot_ly(database, x = ~x5) %>%
add_trace(y = ~y,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv5, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
#matriz de correlacion pearson
head(database)
matrixcor<-cor(database[3:9], use = "everything")
head(round(matrixcor,2))
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(matrixcor, method = "shade", shade.col = NA, tl.col = "black",
addCoef.col = "black")
col
corrplot(matrixcor, method = "shade", shade.col = NA, tl.col = "black",
addCoef.col = "black")
x = RGDP
mod = lm(y~x)
summary(mod)
fv <- mod %>% fitted.values()
f <- plot_ly(database, x = ~RGDP) %>%
add_trace(y = ~Rladder,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
f
x1 = Rsocial
mod1 = lm(y~x1)
summary(mod1)
fv1 <- mod1 %>% fitted.values()
f2 <- plot_ly(database, x = ~x1) %>%
add_trace(y = ~y,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv1, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
f2
x2 = Rhealthy
mod2 = lm(y~x2)
summary(mod2)
fv2 <- mod2 %>% fitted.values()
f3 <- plot_ly(database, x = ~x2) %>%
add_trace(y = ~y,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv2, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
f3
x3 = Rfree
mod3 = lm(y~x3)
summary(mod3)
fv3 <- mod3 %>% fitted.values()
f4 <- plot_ly(database, x = ~x3) %>%
add_trace(y = ~y,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv3, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
f4
x4 = Rgen
mod4 = lm(y~x4)
summary(mod4)
fv4 <- mod4 %>% fitted.values()
f5 <- plot_ly(database, x = ~x4) %>%
add_trace(y = ~y,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv4, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
f5
x5 = Rcorruption
mod5 = lm(y~x5)
summary(mod5)
fv5 <- mod5 %>% fitted.values()
f6 <- plot_ly(database, x = ~x5) %>%
add_trace(y = ~y,
mode = 'markers', marker = list(color='red')) %>%
add_trace(y = fv5, mode = 'lines',
line=list(color='rgb(0,0,255)')) %>%
layout(showlegend = FALSE)
f6
head(database)
matrixcor<-cor(database[3:9], use = "everything")
head(round(matrixcor,2))
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(matrixcor, method = "shade", shade.col = NA, tl.col = "black",
addCoef.col = "black")
head(database)
matrixcor<-cor(database[3:9], use = "everything")
head(round(matrixcor,2))
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(matrixcor, method = "shade", shade.col = NA, tl.col = "black",
addCoef.col = "black")
head(database)
matrixcor<-cor(database[3:9], use = "everything")
head(round(matrixcor,2))
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(matrixcor, method = "shade", shade.col = NA, tl.col = "black",
addCoef.col = "black")
require(dplyr)
library(dplyr)
library(plotly)
library(corrplot)
head(database)
matrixcor<-cor(database[3:9], use = "everything")
head(round(matrixcor,2))
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(matrixcor, method = "shade", shade.col = NA, tl.col = "black",
addCoef.col = "black")
